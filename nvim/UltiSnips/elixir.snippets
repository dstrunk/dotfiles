global !p
def propercase(chars):
	regex_pattern = re.compile("[^A-Za-z]+")
	words = regex_pattern.split(chars)

	return ''.join(w.title() for i, w in enumerate(words))
endglobal

snippet testcase "TestCase" !b
defmodule ${1:Project}.${2:`!p snip.rv = propercase(snip.basename)`} do
  use ExUnit.Case

  ${0}
end
endsnippet

snippet test "Test" !b
test "${1:the one where}" do
  ${0}
end
endsnippet

snippet desc "Describe" !b
describe "${1:The one where}" do
  ${0}
end
endsnippet

snippet def "defines a new function with a multiline block" !b
@doc """
$0

## Examples

    iex>
"""
def ${1:name}(${2:params}) do
  ${3}
end
endsnippet

snippet defp "defines a new private function with a multiline block" !b
defp ${1:name}(${2:params}) do
  $0
end
endsnippet

snippet mod "defines a new module" !b
defmodule ${1:Project}.${2:`!p snip.rv = propercase(snip.basename)`} do
  @moduledoc """
  The ${2} module.
  """

  $0
end
endsnippet

snippet struct "defines a new module with an Ecto schema" !b
defmodule ${1:Project}.${2:`!p snip.rv = propercase(snip.basename)`} do
  @moduledoc """
  The ${2} module.
  """
  use Ecto.Schema
  import Ecto.Changeset

  schema "${3:schema}" do
    $0

    timestamps()
  end
end
endsnippet

snippet fn "insert an anonymous function" !i
fn(${1:args}) -> ${0} end
endsnippet

snippet doc "insert a function documentation block" !b
@doc """
${0}
"""
endsnippet

snippet mdoc "insert a module documenation block" !b
@moduledoc """
${0}
"""
endsnippet

snippet ok "Insert ok tuple" !i
{:ok, ${1:value}}$0
endsnippet

snippet err "Insert error tuple" !i
{:error, ${1:value}}$0
endsnippet
