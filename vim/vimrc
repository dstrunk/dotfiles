if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Leader
let mapleader = " "

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile
set history=50
set ruler         " show cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display status line
set autowrite     " Automatically :write before running commands
set linespace=0

" Switch syntax highlighting on if terminal has colors
" Also switch on highlighting the last used search pattern
syntax on

" Keep good with the Ruby community! Use these settings:
" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Make it obvious where 80 characters is
set textwidth=80

" Colors
" 1 - red
" 2 - green
" 3 - yellow
" 4 - blue
" 5 - magenta
" 6 - cyan
" 7 - white
highlight ColorColumn ctermbg=6
set colorcolumn=+1

" Colorscheme
"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let g:airline_theme='one'
colorscheme one
set background=dark
let g:one_allow_italics=1
highlight NonText ctermbg=NONE
highlight Comment cterm=italic

" Numbers
set number
set numberwidth=5
set relativenumber

" Bigger text, better line spacing
set linespace=2
set guifont=Menlo:h14

" indentLine color
let g:indentLine_color_term = 239

" Embrace the vim
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Open new split panes to right and bottom
set splitbelow
set splitright

" Let's set a mapleader
let mapleader=','

" Resize vim within tmux
autocmd VimResized * :wincmd =

" Zoom a vim pane, <C-w> to re-balance
nnoremap <Leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <Leader>= :wincmd =<cr>

" Ensure folded lines are preserved on save
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" Automatically create directories if they don't exist
augroup Mkdir
  autocmd!
  autocmd BufWritePre *
    \ if !isdirectory(expand("<afile>:p:h")) |
        \ call mkdir(expand("<afile>:p:h"), "p") |
    \ endif
augroup END

" Vim + TMux <3
" RSpec vim tmux mappings
let g:rspec_command = "VtrSendCommandToRunner! bundle exec rspec {spec}"

" Old config - RSpec
" map <Leader>t :call RunCurrentSpecFile()<CR>
" map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>
"
" New config - try test suites for RSpec, ExUnit, etc.
" Everything /I/ need (for now, anyway).
let test#strategy = "vtr"
nmap <silent> <Leader>t :TestNearest<CR>
nmap <silent> <Leader>T :TestFile<CR>
nmap <silent> <Leader>a :TestSuite<CR>
nmap <silent> <Leader>l :TestLast<CR>
nmap <silent> <Leader>g :TestVisit<CR>

" Keep the cursor in the middle of the page
" so we can keep an eye on it. It kind of
" reminds me of how Emacs treats the cursor,
" which I really liked about using Emacs.
set scrolloff=999

map <Leader>fr :VtrFocusRunner<CR>

" Vim tmux integration
nmap <C-f> :VtrSendLinesToRunner<cr>
vmap <C-f> :VtrSendLinesToRunner<cr>

nmap <leader>osr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50 }<cr>
nmap <leader>opr :VtrOpenRunner { 'orientation': 'h', 'percentage': 50, 'cmd': 'pry' }<cr>

nnoremap <leader>sd :VtrSendCtrlD<cr>
nnoremap <leader>sq :VtrSendCommandToRunner q<cr>
nnoremap <leader>sl :VtrSendCommandToRunner <cr>
nnoremap <leader>scu :VtrSendCommandToRunner <cr>

" Ripgrep / The Silver Searcher
if executable('rg')
  " use ripgrep over ag
  set grepprg=rg\ --no-heading\ %s\ --files\ --no-heading\ --color=never

  " use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'rg %s --files --no-heading --color=never""'

  " don't cache for CtrlP
  let g:ctrlp_use_caching = 0
elseif executable('ag')
  " use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " don't cache for CtrlP
  let g:ctrlp_use_caching = 0
endif

" Search for the word under the cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Use ag arguments
" bind '\' to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" Ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!
nnoremap <Leader>s :Ack!<Space>

" CtrlP ignore files
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'

" ctags <3
let g:gutentags_cache_dir='~/.tags_cache'
nnoremap <C-o> :CtrlPTag<cr>

" Neomake
autocmd! BufWritePost * Neomake

" Whitespace things
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd BufWinEnter * match ExtraWhitespace /\s+$/
autocmd BufWinLeave * call clearmatches()

function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

" Add filetype on for snippets
filetype plugin on
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:snips_author="Daniel Strunk"

" autocomplete tags for HTML / XML
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml"

" vim-airline configuration
let g:airline#extensions#branch#enabled = 1
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" Git + Fugitive <3
let g:gitgutter_sign_column_always = 1
set updatetime=250

" Shortcuts for Fugitive
nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>ga :Gwrite<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gd :Gdiff<cr>

" Fix JSON not showing quotes
" https://github.com/Yggdroot/indentLine/issues/140
let g:vim_json_syntax_conceal = 0

" Be dumb
nmap <leader>ny :Nyancat<cr>
nmap <leader>ny2 :Nyancat2<cr>

" macOS + Dash
nmap <silent> <leader>d <Plug>DashSearch

 " NerdTree for extra large projects
 nmap <C-n> :NERDTreeToggle<cr>

 " Tags
 set tags+=tags
