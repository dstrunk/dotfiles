snippet __c "Constructor"
public function __construct(${1})
{
	$0
}
endsnippet

snippet _c "Magento constructor"
public function _construct(${1})
{
	$0
}
endsnippet

snippet testcase "TestCase"
<?php

namespace Tests\\${1:Feature};

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ${2:Class}Test extends TestCase
{
	$0
}
endsnippet

snippet test "Test"
/** @test */
public function ${1:the_one_where}()
{
	$0
}

endsnippet

snippet class "Class file"
<?php

class ${1:Class}
{
	$0
}
endsnippet

snippet iface "Interface"
<?php

interface ${1:Class}
{
	$0
}
endsnippet

snippet pubf "Public Function"

public function ${1:method}(${2})
{
	$0
}
endsnippet

snippet prof "Protected Function"

protected function ${1:method}(${2})
{
	$0
}
endsnippet

snippet prif "Private Function"

private function ${1:method}(${2})
{
	$0
}
endsnippet

snippet belm "Belongs to many"
public function ${1:relationship}()
{
	return \$this->belongsToMany(${1/^(.+)s$/\u$1/g}::class${2:, '${3:table}'});
}

endsnippet

snippet belt "Belongs to"
public function ${1:relationship}()
{
	return \$this->belongsTo(${1/^(.+)$/\u$1/g}::class);
}

endsnippet

snippet hasm "Has many"
public function ${1:relationship}()
{
	return \$this->hasMany(${1/^(.+)s$/\u$1/g}::class);
}

endsnippet

snippet haso "Has one"
public function ${1:relationship}()
{
	return \$this->hasOne(${1/^(.+)$/\u$1/g}::class);
}

endsnippet

snippet hasmt "Has many through"
public function ${1:relationship}()
{
	return \$this->hasManyThrough(${1/^(.+)s$/\u$1/g}::class, ${2}::class);
}
endsnippet
